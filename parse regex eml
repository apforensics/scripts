#Shoutout to https://github.com/picheljitsu for helping me out with this Powershell script since I am a n00b
#Sample run with this cmdline: Process-EMLRegExs -OutputFile regex.csv
#This will dump all the files into a new folder called EMLRegexHits thats created in whatever directory you run it from.

function Process-EMLRegExs{
    [Cmdletbinding()]
    param(
        [parameter()][string]$OutputFile,
        [parameter()][string]$EMLDestinationFolder
        )
#Put REGEX strings below
    $RegexTermsString = "Regex1
    Regex2
    Regex3
    etc"

    #If you don't specify an destination to copy the message files to
    #at runtime, then it'll be set to a folder in your current directory
    #name EMLRegexHits
    if(!$EMLDestinationFolder){ $EMLDestinationFolder = New-Item "EMLRegexHits" -ItemType Directory }

    #Split the RegexTerms from its curren format of a string, into an array
    #First split on new line
    $RegexTermsArray = $RegexTermsString -split "`n"

    #Now clean out the trailing new lines w/ trim method, then cast each string into a regex object
    #Returns and array of Regex objects
    $RegexObjectArray = $RegexTermsArray | Foreach { [regex]$($_.trim()) }

    $GetEMLFiles = Get-ChildItem . -Recurse -Filter *.eml 
    $MatchCounter = 0
    $MatchedFileNames = @()

    ForEach($EMLFile in $GetEMLFiles){

        $EMLfullname = $EMLFile.fullname
        $EMLfilename = $EMLFile.name
        $adoDbStream = New-Object -ComObject ADODB.Stream
        $adoDbStream.Open()
        $adoDbStream.LoadFromFile($EMLFile.FullName)
        $cdoMessage = New-Object -ComObject CDO.Message
        $cdoMessage.DataSource.OpenObject($adoDbStream, "_Stream")
        
        #First, only process the htmlbody against a regex, if we have a match, then build out the header/file info
        $htmlbody = $($cdoMessage.HTMLBody).tostring()

        #Check to see if e-mail body contents matches any of the regex objects
        Foreach($RegexObj in $RegexObjectArray)
            {

            if($htmlbody -match $RegexObj)
                { 

                $messageArray = @($cdoMessage.Fields.Item("urn:schemas:mailheader:date").Value, 
                                  $cdoMessage.Fields.Item("urn:schemas:mailheader:to").Value, 
                                  $cdoMessage.Fields.Item("urn:schemas:mailheader:from").Value, 
                                  $cdoMessage.Fields.Item("urn:schemas:mailheader:bcc").Value, 
                                  $cdoMessage.Fields.Item("urn:schemas:mailheader:cc").Value,
                                  $cdoMessage.Fields.Item("urn:schemas:mailheader:subject").Value, 
                                  $cdoMessage.Fields.Item("urn:schemas:mailheader:sent").Value, 
                                  $cdoMessage.Fields.Item("urn:schemas:mailheader:message-id").Value)

                #only add the file name to the matchedfilenames array if it's not already there
                #and only output to csv for each file that gets at least one regex hit
                if($EMLfullname -notin $MatchedFileNames)
                    { 
                    
                    #Add the name of the file to array collection if it's not already in
                    #This will prevent one file with multiple regex hits from appending multiple time
                    $MatchedFileNames += $EMLfullname

                    $DestinationFile = "$EMLDestinationFolder\$EMLfilename"

                    #Copy the hit file into the destination directory
                    Copy-Item $EMLfullname $DestinationFile

                    #Format the built $messageArray into a csv string
                    $CSVLine = $($messageArray -join ",").ToString()

                    #Convert that CSV line into a PSObject that can be used with Export-CSV, then export it

                    $CSVLine | ConvertFrom-CSV -Header Date,To,From,Bcc,CC,Subject,Sent,Message-ID | Export-Csv -Path $OutputFile -Append -NoTypeInformation

                    }
                
                $MatchCounter ++

                }

            }

        }

    write-host "[+] Searched $($GetEMLFiles.Length) .eml files" 
    write-host "[+] Matched $($MatchedFileNames.Length) files" 
    write-host "[+] Total of $MatchCounter matches in those $($MatchedFileNames.Length) files"

    }
